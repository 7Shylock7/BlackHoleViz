// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Textures
RWTexture2D<float4> State;
RWTexture2D<float4> Source;
RWTexture2D<float4> Statics;

// Parameters
float timeStep;
float lengthScale;

float random(in float2 uv)
{
    float2 noise = (frac(sin(dot(uv, float2(12.9898, 78.233) * 2.0)) * 43758.5453));
    return abs(noise.x + noise.y) * 0.5;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Read from texture
    float4 state = State[id.xy];
    float4 source = Source[id.xy];
    float4 staticSource = Statics[id.xy];
    float4 newState = state;

    // Add sources
    newState.x = (staticSource.x != 0.0) ? staticSource.x : state.x + timeStep * source.x / (lengthScale * lengthScale);
    newState.y = (staticSource.y != 0.0) ? staticSource.y : state.y + timeStep * source.y;
    newState.z = (staticSource.z != 0.0) ? staticSource.z : state.z + timeStep * source.z;
    newState.w = (staticSource.w != 0.0) ? staticSource.w : state.w + timeStep * source.w / (lengthScale * lengthScale);

    // TEMP: Decay within horizon
    // Get the dimensions of the RenderTexture
    uint width, height;
    State.GetDimensions(width, height);
    float2 fid = float2(id.xy);
    float2 r = lengthScale * float2(fid.x - (float(width) / 2.0), fid.y - (float(height) / 2.0));
    float rlen = length(r);
    if (rlen < 10.0 * lengthScale) {
        newState.x = exp(-timeStep / 0.1) * newState.x;
    }

    // Save to texture
    State[id.xy] = newState;
}
