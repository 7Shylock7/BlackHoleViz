// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Output textures
RWTexture2D<float4> StateIn;
RWTexture2D<float4> Source;
RWTexture2D<float4> StateOut;

// Input parameters
float timeStep;
float lengthScale;

// Physical parameters
float nu_0;
float D_0;
float lamdba_0;

// Global parameters
int width, height;

// Bilinear interpolation
float4 BiLerp(float2 coord) {

    // Get fractional and integral parts of coordinate
    int2 icoord = floor(coord);
    float2 fcoord = coord - icoord;
}

// Advect along flow lines
float4 Advect() {

    return float4(0.0, 0.0, 0.0, 0.0);
}

// Diffuse field properties
float4 Diffuse() {

    return float4(0.0, 0.0, 0.0, 0.0);
}

// Apply forces to velocity field
float4 ApplyForce() {

    return float4(0.0, 0.0, 0.0, 0.0);
}

// Perform Helmholtz-Hodge Decomposition
float4 Project() {

    return float4(0.0, 0.0, 0.0, 0.0);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    StateIn.GetDimensions(width, height);

    // Calculate position
    float2 fid = float2(id.xy);
    float2 r = 2.0 * float2((fid.x / width) - 0.5, (fid.y / height) - 0.5);

    // Write back to state
}
