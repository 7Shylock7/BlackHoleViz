// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Textures
RWTexture2D<float4> State;
RWTexture2D<float4> Source;
RWTexture2D<float4> Statics;

// Parameters
float lengthScale;
float newtonConstant;
float centralMass;

float random(in float2 uv)
{
    float2 noise = (frac(sin(dot(uv, float2(12.9898, 78.233) * 2.0)) * 43758.5453));
    return abs(noise.x + noise.y) * 0.5;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    State.GetDimensions(width, height);

    // Calculate position
    float2 fid = float2(id.xy);
    //float2 r = 2.0 * float2((fid.x / width) - 0.5, (fid.y / height) - 0.5);
    float2 r = lengthScale * float2(fid.x - (float(width) / 2.0), fid.y - (float(height) / 2.0));
    float rlen = length(r);
    float horizon = 1.0 * lengthScale;

    // Initialize variables
    float4 state = float4(0.0, 0.0, 0.0, 0.0);
    float4 source = float4(0.0, 0.0, 0.0, 0.0);
    float4 staticSource = float4(0.0, 0.0, 0.0, 0.0);

    // Set initial conditions
    if (rlen < 200.0 * horizon && rlen > 10.0*horizon) {
        state.x = 0.0 + 1.0 * random(float2(517.327, -13.76) + 0.3178*id.xy);
    }
    else {
        state.x = 0.1;
    }
    state.y = 0.0;
    state.z = 0.0;
    state.w = 300.0;

	// Set up sources
    if (rlen > horizon) {

        // Keplerian orbital speed
        float v = sqrt(newtonConstant * centralMass / rlen);

        // Initial velocity
        state.y = 1.1 * v * normalize(r).y * (0.8 + 0.2 * random(173.275 + id.xy));
        state.z = -1.1 * v * normalize(r).x * (0.8 + 0.2 * random(517.327 + id.xy));;
    }

    // Save textures
    State[id.xy] = state;
    Source[id.xy] = source;
    Statics[id.xy] = staticSource;
}
